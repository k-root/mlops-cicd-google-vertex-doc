# PIPELINE DEFINITION
# Name: train-model
# Inputs:
#    data: system.Dataset
#    model_directory: str
# Outputs:
#    model_artifact: system.Model
components:
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        model_directory:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model_artifact:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'google-cloud-aiplatform'\
          \ 'pandas' 'joblib==1.2.0' 'scikit-learn' 'google-cloud-bigquery' 'google-cloud-bigquery-storage'\
          \ 'google-cloud-storage' 'google-cloud-pipeline-components' 'db-dtypes'\
          \ 'kfp' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(model_directory:str ,data: Input[Dataset], model_artifact:\
          \ Output[Model]):\n    from google.cloud import storage\n    from google.cloud\
          \ import aiplatform\n    import numpy as np\n    import pandas as pd\n \
          \   import os\n\n    from sklearn.ensemble import RandomForestRegressor\n\
          \    from sklearn.compose import ColumnTransformer\n    from sklearn.model_selection\
          \ import train_test_split, cross_val_score\n    from sklearn.pipeline import\
          \ Pipeline\n    from sklearn.preprocessing import OneHotEncoder, StandardScaler\n\
          \    from joblib import dump\n    import pickle\n\n    df = pd.read_csv(data.path+\"\
          .csv\")\n    X=df.drop(['trip_start_timestamp'],axis=1)\n    y=df['fare']\n\
          \    ct_pipe = ColumnTransformer(transformers=[\n        ('hourly_cat',\
          \ OneHotEncoder(categories=[range(0,24)], sparse = False), ['trip_start_hour']),\n\
          \        ('dow', OneHotEncoder(categories=[['Mon', 'Tue', 'Sun', 'Wed',\
          \ 'Sat', 'Fri', 'Thu']], sparse = False), ['trip_start_day_of_week']),\n\
          \        ('std_scaler', StandardScaler(), [\n            'trip_start_year',\n\
          \            'abs_distance',\n            'pickup_longitude',\n        \
          \    'pickup_latitude',\n            'dropoff_longitude',\n            'dropoff_latitude',\n\
          \            'trip_miles',\n            'trip_seconds'])\n    ])\n\n   \
          \ X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\
          \ random_state=123)\n\n    rfr_pipe = Pipeline([\n        ('ct', ct_pipe),\n\
          \        ('forest_reg', RandomForestRegressor(\n            n_estimators\
          \ = 20,\n            max_features = 1.0,\n            n_jobs = -1,\n   \
          \         random_state = 3,\n            max_depth=None,\n            max_leaf_nodes=None,\n\
          \        ))\n    ])\n\n\n    rfr_score = cross_val_score(rfr_pipe, X_train,\
          \ y_train, scoring = 'neg_mean_squared_error', cv = 5)\n    rfr_rmse = np.sqrt(-rfr_score)\n\
          \    rfr_rmse.mean()\n    final_model=rfr_pipe.fit(X_train, y_train)\n\n\
          \    artifact_filename = 'model.pkl'\n\n    # Save model artifact to local\
          \ filesystem (doesn't persist)\n    local_path = artifact_filename\n   \
          \ local_path = model_artifact.path+'.pkl'\n    with open(local_path, 'wb')\
          \ as model_file:\n      pickle.dump(final_model, model_file)\n\n    # Upload\
          \ model artifact to Cloud Storage\n    storage_path = os.path.join(model_directory,\
          \ artifact_filename)\n    blob = storage.blob.Blob.from_string(storage_path,\
          \ client=storage.Client())\n    blob.upload_from_filename(local_path)\n\n"
        image: python:3.9
pipelineInfo:
  name: train-model
root:
  dag:
    outputs:
      artifacts:
        model_artifact:
          artifactSelectors:
          - outputArtifactKey: model_artifact
            producerSubtask: train-model
    tasks:
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        inputs:
          artifacts:
            data:
              componentInputArtifact: data
          parameters:
            model_directory:
              componentInputParameter: model_directory
        taskInfo:
          name: train-model
  inputDefinitions:
    artifacts:
      data:
        artifactType:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    parameters:
      model_directory:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      model_artifact:
        artifactType:
          schemaTitle: system.Model
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.3.0
